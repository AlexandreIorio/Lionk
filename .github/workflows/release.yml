name: Release

on:
  pull_request:
    # types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ${{ vars.RUNNER_DISTRIBUTION }}
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ vars.DOTNET_VERSION }}

    - name: Calculate new version
      id: calculate-version
      run: |
        git fetch --tags
        LAST_TAG=$(git tag -l "[0-9]*.[0-9]*.[0-9]*" --sort=-v:refname)
        echo "Commande : $(git tag -l "[0-9]*.[0-9]*.[0-9]*" --sort=-v:refname)"
        echo "Last tag: $LAST_TAG"

        if [ -z "$LAST_TAG" ]; then
          echo "No tags found that match the pattern."
          exit 1
        fi

        # Extract the version components
        IFS='.' read -r -a VERSION_PARTS <<< "${LAST_TAG//v/}"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}

        # Determine the new version based on PR title
        if [[ "${{ github.event.pull_request.title }}" == *"major"* ]]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [[ "${{ github.event.pull_request.title }}" == *"minor"* ]]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        elif [[ "${{ github.event.pull_request.title }}" == *"patch"* ]]; then
          PATCH=$((PATCH + 1))
        else
          echo "Invalid PR title for version increment. Must contain 'major', 'minor', or 'patch'."
          exit 1
        fi

        NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        echo "New version: $NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Create and push new tag
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        NEW_VERSION=${{ env.NEW_VERSION }}
        git tag $NEW_VERSION
        git push https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/AlexandreIorio/Lionk.git $NEW_VERSION


    - name: Create release information
      run: |
        echo "BODY=# Changelog\n## Version ${{ env.NEW_VERSION }}\n${{ github.event.pull_request.body }}" >> $GITHUB_ENV
        echo "TITLE=Release ${{ env.NEW_VERSION }}" >> $GITHUB_ENV    

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEW_VERSION }}
        release_name: ${{ env.TITLE }}
        body: ${{ env.BODY }}
        draft: false
        prerelease: false
    - name: Build Docker image
      run: |
        docker build -t ghcr.io/${{ github.repository }}/${{ vars.APP_NAME}}:${{ env.NEW_VERSION }} .

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GH_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Push Docker image
      run: |
        docker push ghcr.io/${{ github.repository }}/${{ vars.APP_NAME}}:${{ env.NEW_VERSION }}
        docker push ghcr.io/${{ github.repository }}/${{ vars.APP_NAME}}:latest
