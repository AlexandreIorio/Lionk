name: Check PR Title and Update Project Versions

on:
  pull_request:
    branches:
      - test

jobs:
  check-pr-title:
    runs-on: ${{ vars.RUNNER_DISTRIBUTION }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get pull request title and body
      id: get_pr_info
      run: |
        echo "PR_TITLE<<EOF" >> $GITHUB_ENV
        echo "${{ github.event.pull_request.title }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "PR_BODY<<EOF" >> $GITHUB_ENV
        echo "${{ github.event.pull_request.body }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "SRC_PATH=${{vars.SRC_PATH}}" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Process PR title, body, and check projects
      id: process_title_body
      run: |
        python .github/workflows/scripts/process_pr.py

    - name: Upload project data artifact
      uses: actions/upload-artifact@v3
      with:
        name: project-data
        path: |
          projects.txt
          types.txt
          oldversions.txt
          newversions.txt
          changelog.json
          path.txt

  process-csproj:
    permissions:
      contents: write

    runs-on: ${{ vars.RUNNER_DISTRIBUTION }}
    needs: check-pr-title

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download project data artifact
        uses: actions/download-artifact@v3
        with:
          name: project-data

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'   
          
      - name: Setup environment variables
        run: |
          echo "SRC_PATH=${{vars.SRC_PATH}}" >> $GITHUB_ENV
          echo "PROJECTS=$(cat projects.txt)" >> $GITHUB_ENV
          echo "NEW_VERSION=$(cat newversions.txt)" >> $GITHUB_ENV
          echo "CHANGELOG=$(cat changelog.json)" >> $GITHUB_ENV
          echo "BOT_NAME=${{ vars.BOT_NAME}}" >> $GITHUB_ENV
          echo "BOT_MAIL=${{ vars.BOT_MAIL}}" >> $GITHUB_ENV
          echo "HEAD_REF=${{ github.head_ref }}" >> $GITHUB_ENV

      - name: Backup csproj files
        run: |
          python .github/workflows/scripts/backup_csproj.py

      - name: Process csproj files
        run: |
          python .github/workflows/scripts/process_csproj.py
  
      - name: Commit and push changes
        run: |
          python .github/workflows/scripts/commit_csproj.py

      - name: Create csproj data artifact
        uses: actions/upload-artifact@v3
        with:
          name: csproj-data
          path: ${{ vars.SRC_PATH }}

  publish-nuget:
    runs-on: ${{ vars.RUNNER_DISTRIBUTION }}
    needs: process-csproj

    steps:
      - name: Download csproj data artifact
        uses: actions/download-artifact@v3
        with:
          name: csproj-data
          path: ${{ vars.SRC_PATH }}

      - name: Download project data artifact
        uses: actions/download-artifact@v3
        with:
          name: project-data

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ vars.DOTNET_VERSION }}


      - name: Publish NuGet packages
        run: |
          projects=($(cat projects.txt))
          newversions=($(cat newversions.txt))

          ls -R ${{vars.SRC_PATH}}

          if [ ${#projects[@]} -eq 0 ]; then
            echo "No projects to publish"
            exit 1
          fi

          for i in "${!projects[@]}"; do
            project=${projects[$i]}
            newversion=${newversions[$i]}
            csproj="${{vars.SRC_PATH}}/$project/$project.csproj"
  
            echo "Publishing $csproj as version $newversion"
  
            dotnet pack "$csproj" -o ./output
            dotnet nuget push "./output/$project.$newversion.nupkg" -k ${{ secrets.GH_TOKEN }} -s "${{ vars.NUGET_REGISTRY}}"
          done


      - name: Checkout repository
        if : failure()  
        uses: actions/checkout@v3    
      
      - name: Setup Python if failure
        if: failure()
        uses: actions/setup-python@v3
        with:
          python-version: '3.x' 

      - name: Cleanup NuGet packages on failure
        if: failure()
        run: |
          python .github/workflows/scripts/revert_commit_csproj.py
          
          projects=($(cat projects.txt))
          newversions=($(cat newversions.txt))
          for i in "${!projects[@]}"; do
            project=${projects[$i]}
            newversion=${newversions[$i]}
            curl -X DELETE -u ${{ secrets.NUGET_API_KEY }} "${{ vars.NUGET_REGISTRY}}"

      
  create-tag-and-release:
    permissions:
      contents: write
    runs-on: ${{ vars.RUNNER_DISTRIBUTION }}
    needs: publish-nuget

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download project data artifact
      uses: actions/download-artifact@v3
      with:
        name: project-data

    - name: Setup environment variables
      run: echo "SRC_PATH=${{vars.SRC_PATH}}" >> $GITHUB_ENV

    - name: Create tags and releases
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        projects=($(cat projects.txt))
        newversions=($(cat newversions.txt))
        # Show projects and types
        echo "Projects: ${projects[@]}"
        echo "new versions: ${newversions[@]}"

        for i in "${!projects[@]}"; do
            project=${projects[$i]}
            newversion=${newversions[$i]}
            tag="${project}_${newversion}"

            echo "Creating tag $tag"

            git config --global user.name '${{ vars.BOT_NAME}}'
            git config --global user.email '${{ vars.BOT_MAIL}}'

            # Create the tag
            git tag -a "$tag" -m "Release $tag"
            git push origin "$

    - name: Setup Python if failure
      if: failure()
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'  

    - name: Cleanup tags and releases on failure
      if: failure()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |

          python .github/workflows/scripts/revert_commit_csproj.py
          
          projects=($(cat projects.txt))
          newversions=($(cat newversions.txt))
          for i in "${!projects[@]}"; do
            project=${projects[$i]}
            newversion=${newversions[$i]}
            curl -X DELETE -u ${{ secrets.NUGET_API_KEY }} "${{ vars.NUGET_REGISTRY}}"


          for i in "${!projects[@]}"; do
              project=${projects[$i]}
              newversion=${newversions[$i]}
              tag="${project}_${newversion}"
      
              # Delete the tag locally and remotely
              git tag -d "$tag"
              git push origin --delete "$tag"
      
              # Delete the release
              release_id=$(gh release view "$tag" --json id -q .id)
              gh release delete "$release_id" --yes
          done
        