name: Check PR Title and Update Project Versions

on:
  pull_request:
    branches:
      - test

jobs:
  check-pr-title:
    runs-on: ${{ vars.RUNNER_DISTRIBUTION }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get pull request title and body
      id: get_pr_info
      run: |
        echo "PR_TITLE<<EOF" >> $GITHUB_ENV
        echo "${{ github.event.pull_request.title }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "PR_BODY<<EOF" >> $GITHUB_ENV
        echo "${{ github.event.pull_request.body }}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "SRC_PATH=./src_test/" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Process PR title, body, and check projects
      id: process_title_body
      run: |
        python .github/workflows/scripts/process_pr.py

    - name: Upload project data artifact
      uses: actions/upload-artifact@v3
      with:
        name: project-data
        path: |
          projects.txt
          types.txt
          oldversions.txt
          newversions.txt
          changelogs.json





  # publish-nuget:
  #   runs-on: ${{ vars.RUNNER_DISTRIBUTION }}
  #   needs: check-pr-title

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Download project data artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: project-data

  #     - name: Setup .NET Core
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: ${{ vars.DOTNET_VERSION }}

  #     - name: Load project data
  #       run: |
  #         echo "PROJECTS=$(cat projects.txt)" >> $GITHUB_ENV
  #         echo "NEW_VERSION=$(cat newversions.txt)" >> $GITHUB_ENV
  #         echo "SRC_PATH=src_test/" >> $GITHUB_ENV

  #     - name: Publish NuGet packages
  #       run: |
  #           projects=(${{ env.PROJECTS }})
  #           newversions=(${{ env.NEW_VERSION }})
  #           SRC_PATH=${{ env.SRC_PATH }}
    
  #           for i in "${!projects[@]}"; do
  #             project=${projects[$i]}
  #             newversion=${newversions[$i]}
  #             csproj="$SRC_PATH/$project/$project.csproj"
    
  #             echo "Publishing $csproj as version $newversion"
    
  #             dotnet pack "$csproj" -p:PackageVersion="$newversion" -o ./output
  #             dotnet nuget push "./output/$project.$newversion.nupkg" -k ${{ secrets.GH_TOKEN }} -s "https://nuget.pkg.github.com/alexandreiorio/index.json"
  #           done

  # update-csproj:
  #   permissions:
  #     contents: write
  #   runs-on: ${{ vars.RUNNER_DISTRIBUTION }}
  #   needs: publish-nuget

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3
  #     with:
  #       ref: ${{ github.head_ref }}

  #   - name: Download project data artifact
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: project-data

  #   - name: Load project data
  #     run: |
  #       echo "PROJECTS=$(cat projects.txt)" >> $GITHUB_ENV
  #       echo "NEW_VERSION=$(cat newversions.txt)" >> $GITHUB_ENV
  #       echo "SRC_PATH=src_test/" >> $GITHUB_ENV

  #   - name: Update .csproj files
  #     run: |

  #       projects=(${{ env.PROJECTS }})
  #       newversions=(${{ env.NEW_VERSION }})
  #       SRC_PATH=(${{ env.SRC_PATH }})

  #       # Update the .csproj files with new versions
  #       for i in "${!projects[@]}"; do
  #         project=${projects[$i]}
  #         newversion=${newversions[$i]}
  #         csproj="$SRC_PATH/$project/$project.csproj"
  #         temp_csproj="$SRC_PATH/$project/temp_$project.csproj"
  #         echo "Updating $csproj to version $newversion"
          
  #         # Copy to a temporary file
  #         cp "$csproj" "$temp_csproj"
          
  #         # Update the version in the temporary file
  #         awk -v newversion="$newversion" '
  #         BEGIN { FS = OFS = "" }
  #         /<version>/ { $0 = gensub(/<version>.*<\/version>/, "<version>" newversion "</version>", 1) }
  #         { print }
  #         ' "$temp_csproj" > "$csproj"
          
  #         rm "$temp_csproj"

  #         echo "Updated $csproj content:"
  #         cat "$csproj"
  #       done

  #   - name: Commit and push changes
  #     run: |
  #       projects=(${{ env.PROJECTS }})
  #       newversions=(${{ env.NEW_VERSION }})
  #       SRC_PATH=(${{ env.SRC_PATH }})

  #       git config --global user.name '${{ vars.BOT_NAME}}'
  #       git config --global user.email '${{ vars.BOT_MAIL}}'
  #       for project in "${projects[@]}"; do
  #         git add "$SRC_PATH/$project/$project.csproj"
  #       done
  #       git commit -m "Update project versions"
  #       git push origin HEAD:${{ github.head_ref }}

  # create-tag-and-release:
  #   permissions:
  #     contents: write
  #   runs-on: ${{ vars.RUNNER_DISTRIBUTION }}
  #   needs: update-csproj

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3

  #   - name: Download project data artifact
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: project-data

  #   - name: Create tags and releases
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     run: |
  #       projects=($(cat projects.txt))
  #       newversions=($(cat newversions.txt))
  #       # Show projects and types
  #       echo "Projects: ${projects[@]}"
  #       echo "new versions: ${newversions[@]}"

  #       for i in "${!projects[@]}"; do
  #           project=${projects[$i]}
  #           newversion=${newversions[$i]}
  #           tag="${project}_v${newversion}"

  #           echo "Creating tag $tag"

  #           git config --global user.name '${{ vars.BOT_NAME}}'
  #           git config --global user.email '${{ vars.BOT_MAIL}}'

  #           # Create the tag
  #           git tag -a "$tag" -m "Release $tag"
  #           git push origin "$tag"

  #           # Create the release
  #           gh release create "$tag" --title "$tag" --notes "Release of version $newversion for $project"
  #       done

