name: Check PR Title and Update Project Versions

on:
  pull_request:
    branches:
      - test

jobs:
  check-pr-title:
    runs-on: ${{ vars.RUNNER_DISTRIBUTION }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get pull request title
      id: get_pr_title
      run: echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV

    - name: Process PR title and check projects
      id: process_title
      run: |
        PR_TITLE="${{ env.PR_TITLE }}"
        SRC_PATH="./src_test/"

        echo "Pull Request title: $PR_TITLE"

        # Extract project names and version types from the PR title
        pairs=$(echo "$PR_TITLE" | grep -oE '\b\w+\b (major|minor|patch)')
        if [ -z "$pairs" ]; then
        echo "Pull Request title does not contain version change indication (major, minor, patch)."
        exit 0
        fi

        # Initialize arrays
        declare -a projects
        declare -a types
        declare -a oldversions
        declare -a newversions

        # Split projects and types into arrays
        while IFS= read -r pair; do
        project=$(echo "$pair" | awk '{print $1}')
        type=$(echo "$pair" | awk '{print $2}')
        projects+=("$project")
        types+=("$type")
        done <<< "$pairs"

        # Show projects and types
        echo "Projects: ${projects[@]}"
        echo "Types: ${types[@]}"

        # Validate types
        for type in "${types[@]}"; do
        if [[ "$type" != "major" && "$type" != "minor" && "$type" != "patch" ]]; then
            echo "Invalid version type: $type"
            exit 1
        fi
        done

        echo "All version types are valid."

        # Check if project file exists
        for project in "${projects[@]}"; do
        if [ ! -f "$SRC_PATH/$project/$project.csproj" ]; then
            echo "Project file not found: $SRC_PATH/$project/$project.csproj"
            exit 1
        fi
        done

        echo "All project files exist."

        # Loop through each project and type to populate oldversions and newversions arrays
        for i in "${!projects[@]}"; do
        project=${projects[$i]}
        type=${types[$i]}
        csproj="$SRC_PATH/$project/$project.csproj"
        oldversion=$(grep -oPm1 "(?<=<version>)[^<]+" "$csproj")
        oldversions+=("$oldversion")
        
        IFS='.' read -r -a version_parts <<< "$oldversion"
        major=${version_parts[0]}
        minor=${version_parts[1]}
        patch=${version_parts[2]}

        if [[ "$type" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
        elif [[ "$type" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
        elif [[ "$type" == "patch" ]]; then
            patch=$((patch + 1))
        fi

        newversion="$major.$minor.$patch"
        newversions+=("$newversion")

        echo "$project old version: $oldversion, new version: $newversion"
        done

        # Save data to artifact
        echo "${projects[@]}" > projects.txt
        echo "${types[@]}" > types.txt
        echo "${oldversions[@]}" > oldversions.txt
        echo "${newversions[@]}" > newversions.txt

    - name: Upload project data artifact
      uses: actions/upload-artifact@v2
      with:
        name: project-data
        path: |
          projects.txt
          types.txt
          oldversions.txt
          newversions.txt

  update-csproj:
    runs-on: ${{ vars.RUNNER_DISTRIBUTION }}
    needs: check-pr-title

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download project data artifact
      uses: actions/download-artifact@v2
      with:
        name: project-data

    - name: Load project data
      run: |
        projects=($(cat projects.txt))
        newversions=($(cat newversions.txt))
        SRC_PATH="./src_test/"

        # Update the .csproj files with new versions
        for i in "${!projects[@]}"; do
          project=${projects[$i]}
          newversion=${newversions[$i]}
          csproj="$SRC_PATH/$project/$project.csproj"
          temp_csproj="$SRC_PATH/$project/temp_$project.csproj"
          echo "Updating $csproj to version $newversion"
          
          # Copy to a temporary file
          cp "$csproj" "$temp_csproj"
          
          # Update the version in the temporary file
          awk -v newversion="$newversion" '
          BEGIN { FS = OFS = "" }
          /<version>/ { $0 = gensub(/<version>.*<\/version>/, "<version>" newversion "</version>", 1) }
          { print }
          ' "$temp_csproj" > "$csproj"
          
          rm "$temp_csproj"

          echo "Updated $csproj content:"
          cat "$csproj"
        done

    - name: Commit and push changes
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git checkout -b update-versions
        git add "$SRC_PATH/
        git commit -m "Update project versions"
        git push origin update-versions