name: Check PR Title and Echo Project Versions

on:
  pull_request:
    branches:
      - test

jobs:
  check-pr-title:
    runs-on: ${{ vars.RUNNER_DISTRIBUTION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get pull request title
        id: get_pr_title
        run: echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV

      - name: Process PR title and check projects
        id: process_title
        run: |
          PR_TITLE="${{ env.PR_TITLE }}"
          SRC_PATH="./src_test/"

          echo "Pull Request title: $PR_TITLE"

          # Extract project names and version types from the PR title
          pairs=$(echo "$PR_TITLE" | grep -oE '\b\w+\b (major|minor|patch)')
          if [ -z "$pairs" ]; then
            echo "Pull Request title does not contain version change indication (major, minor, patch)."
            exit 0
          fi

          # Initialize arrays
          declare -a projects
          declare -a types

          # Split projects and types into arrays
          while IFS= read -r pair; do
            project=$(echo "$pair" | awk '{print $1}')
            type=$(echo "$pair" | awk '{print $2}')
            projects+=("$project")
            types+=("$type")
          done <<< "$pairs"

          # Show projects and types
          echo "Projects: ${projects[@]}"
          echo "Types: ${types[@]}"

          # Validate types
          for type in "${types[@]}"; do
            if [[ "$type" != "major" && "$type" != "minor" && "$type" != "patch" ]]; then
              echo "Invalid version type: $type"
              exit 1
            fi
          done

          echo "All version types are valid."

          # Check if project file exists
          for project in "${projects[@]}"; do
            if [ ! -f "$SRC_PATH/$project/$project.csproj" ]; then
              echo "Project file not found: $SRC_PATH/$project/$project.csproj"
              exit 1
            fi
          done

          echo "All project files exist."

          # Loop through each project and type
          for i in "${!projects[@]}"; do
            project=${projects[$i]}
            type=${types[$i]}
            csproj="$SRC_PATH/$project/$project.csproj"
            VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" "$csproj")
            echo "$project has a $type update to version $VERSION"
          done
