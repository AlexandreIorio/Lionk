@using System.ComponentModel
@using Lionk.Core.Component
@using Lionk.Core.Component.Cyclic
@using Lionk.Core.Observable
@using Lionk.Core.Razor.Views.CyclicComponent
@implements IDisposable
@inject ICyclicExecutorService CyclicExecutorService

<link href="_content/Lionk.Core.Razor/css/CyclicExecutor.css" rel="stylesheet" />

<MudPaper Class="cyclic-executor-view" Elevation="4" Style="padding: 20px;">
    <MudGrid Justify="Justify.SpaceBetween">
        <MudItem xs="12" class="text-end">
            <ToggleCyclicExecutor />
        </MudItem>

        <MudItem xs="12" md="6" lg="4">
            <CyclicExecutorStatusCard />
        </MudItem>
    </MudGrid>

    <MudGrid Class="components-grid">
        @foreach (ICyclicComponent component in CyclicExecutorService.Components)
        {
            <MudItem xs="12" sm="6" md="4">
                <CyclicComponentCard Component="component" />
            </MudItem>
        }
    </MudGrid>
</MudPaper>

@code {
    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (CyclicExecutorService is ObservableElement obs)
            obs.PropertyChanged += OnCyclicExecutorServicePropertyChanged;
    }

    private void OnCyclicExecutorServicePropertyChanged(object? sender, PropertyChangedEventArgs e)
        => InvokeAsync(StateHasChanged);

    /// <inheritdoc/>
    public void Dispose()
    {
        if (CyclicExecutorService is ObservableElement obs)
            obs.PropertyChanged -= OnCyclicExecutorServicePropertyChanged;
    }
}
