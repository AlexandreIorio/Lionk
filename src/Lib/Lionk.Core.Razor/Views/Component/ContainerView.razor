@inject IComponentService ComponentService
@using Lionk.Core.Component
@using Lionk.Core.Model.Component
@using IComponent = Lionk.Core.Component.IComponent
@inherits MudItem
@namespace Lionk.Core.View

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true"/>
}
else if (_isError)
{
    <NoComponentView Text=@_errorText/>
}
else
{
    <ComponentView
        ComponentViewModel="@ComponentViewModel"
        Component="@_component"
        OnUpdate="OnUpdate"
        OnDelete="OnDelete"/>
}


@code {
    /// <summary>
    /// The component view model.
    /// </summary>
    [Parameter]
    public ComponentViewModel? ComponentViewModel { get; set; }

    /// <summary>
    /// Event that is called when the componentViewModel is updated.
    /// </summary>
    [Parameter]
    public EventCallback<ComponentViewModel> OnUpdate { get; set; }

    /// <summary>
    /// Event that is called when the componentViewModel is deleted.
    /// </summary>
    [Parameter]
    public EventCallback<ComponentViewModel> OnDelete { get; set; }

    private ComponentContainer? _container;

    private IComponent? _component;

    private bool _isLoading = true;

    private bool _isError = false;

    private string _errorText = "Component not found";

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        if (ComponentViewModel is null)
        {
            _isError = true;
            _errorText = "Component view can be restored or does not exist";
            return;
        }

        _container = new ComponentContainer(ComponentService, ComponentViewModel.ComponentUniqueId);
        _component = (BaseComponent?)_container?.Component;
        if (_component is not null)
        {
            _isLoading = false;
            _isError = false;
        }
        else if (_component is null && _container?.ComponentId is not null)
        {
            _isLoading = true;
            _isError = false;
            _container.NewComponentAvailable += OnNewComponentAvailable;
        }
        else
        {
            _isLoading = false;
            _isError = true;
        }
    }

    private void OnNewComponentAvailable(object? sender, EventArgs e)
    {
        _component = (BaseComponent?)_container?.Component;
        if (_container?.Component is not null)
        {
            _isLoading = false;
            _isError = false;
            _container.NewComponentAvailable -= OnNewComponentAvailable;
        }
        else
        {
            _isLoading = false;
            _isError = true;
        }

        StateHasChanged();
    }

}