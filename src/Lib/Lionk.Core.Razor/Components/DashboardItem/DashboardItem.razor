@inherits MudItem
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IComponentService ComponentService

@namespace Lionk.Core.Component
@using Lionk.Core.Razor.Components

<MudItem Style=" margin-right:15px;
            margin-bottom:15px;">
    <MudPaper Class="pa-4"
              Style=" position: relative;
            height:100%;
            width:100%">
        <div style="position: absolute;
                    top: @_marginPixels;
                    right: @_marginPixels;
                    display: flex;
                    flex-direction: column;">
            @if (_isConfigurable)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Settings"
                               Size="Size.Small"
                               OnClick="ConfigurableClicked" />
            }

            @if (_isDetailable)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Info"
                               Size="Size.Small"
                               OnClick="DetailableClicked" />
            }
            @if (_isPageable)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Pageview"
                               Size="Size.Small"
                               OnClick="PageableClicked" />
            }
            @if (_isExecutable)
            {
                <MudIconButton Icon="@Icons.Material.Filled.PlayArrow"
                               Size="Size.Small"
                               OnClick="ExecutableClicked" />
            }

        </div>
        <div style="position: absolute;
                    bottom: @_marginPixels;
                    right: @_marginPixels;
                    display: flex;
                    flex-direction: column;">



            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem IconSize="Size.Small"
                             Icon="@Icons.Material.Filled.Edit"
                             OnClick="EditWidgetAsync">
                    Edit
                </MudMenuItem>
                <MudMenuItem IconSize="Size.Small"
                             Icon="@Icons.Material.Filled.DeleteForever"
                             IconColor="Color.Error"
                             OnClick="RemoveWidgetAsync">
                    <MudText Color="Color.Error">Delete</MudText>
                </MudMenuItem>
            </MudMenu>



        </div>
        <DynamicComponent @ref=_dynamicComponent Type="@_view" Parameters="@_parameters" />
    </MudPaper>
</MudItem>



@code {

    private const string _marginPixels = "5px";

    private Type? _view;


    public Dictionary<string, object> _parameters = new();


    [Parameter]
    public Widget? Widget
    {
        get;
        set;
    }


    private bool _isConfigurable;
    private bool _isDetailable;
    private bool _isPageable;
    private bool _isExecutable;

    private DynamicComponent? _dynamicComponent;
    private object? _instance => _dynamicComponent?.Instance;

    protected override void OnInitialized()
    {
        if (Widget is not null)
        {
            _view = Widget.GetType();
            if (Widget.Component is not null && Widget.InstanceName is not null)
            {
                _parameters.Add("ComponentParameter", Widget.Component);
                _parameters.Add("InstanceNameParameter", Widget.InstanceName);
            }
        }
    }

    private void DefineButtonsState()
    {
        if (_instance is null) return;
        _isConfigurable = _instance is IConfigurableComponent;
        _isDetailable = _instance is IDetailableComponent;
        _isPageable = _instance is IPageableComponent;
        _isExecutable = _instance is IExecutableComponent;
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        DefineButtonsState();
    }

    private async Task EditWidgetAsync()
    {
        DialogParameters dialogParameters = new();
        if (Widget is null)
        {
            Snackbar.Add("Widget not available", Severity.Error);
            return;
        }

        dialogParameters.Add("Widget", Widget);

        var dialogReference = DialogService.Show<WidgetConfig>("Widget edition", dialogParameters);

        var dialogResult = await dialogReference.Result;

        if (Widget.Component is not null)
        {
            // _parameters["ComponentParameter"] = Widget.Component;
            // ParameterView parameterView = new();
            // parameterView.SetParameterProperties(Widget.Component);
            // await _dynamicComponent?.SetParametersAsync(parameterView);
        }

        if (dialogResult is null || dialogResult.Canceled) Snackbar.Add("Widget edition cancelled", Severity.Warning);
    }

    private async Task RemoveWidgetAsync()
    {
        if (Widget is null)
        {
            Snackbar.Add("Widget not available", Severity.Error);
            return;
        }

        var dialogResult = await DialogService.ShowMessageBox("Delete widget", "Are you sure you want to delete this widget?", yesText: "Yes", noText: "No");

        if (dialogResult == (bool)dialogResult)
        {
            Snackbar.Add("Widget deleted", Severity.Success);
        }
    }

    private void ConfigurableClicked()
    {
        if (_instance is IConfigurableComponent configurableComponent)
        {
            configurableComponent.OpenConfigurationAsync();
        }
    }

    private void DetailableClicked()
    {
        if (_instance is IDetailableComponent detailableComponent)
        {
            detailableComponent.OpenDetailAsync();
        }
    }

    private void PageableClicked()
    {
        if (_instance is IPageableComponent pageableComponent)
        {
            pageableComponent.OpenComponentPageAsync();
        }
    }

    private void ExecutableClicked()
    {
        if (_instance is IExecutableComponent executableComponent)
        {
            executableComponent.Execute();
        }
    }
}
