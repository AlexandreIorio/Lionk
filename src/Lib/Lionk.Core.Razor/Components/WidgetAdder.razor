@using Lionk.Core.Component
@using Lionk.Core.View
@inject IDialogService DialogService
@inject IComponentService ComponentService
@inject ISnackbar Snackbar


<MudDialog>
    <DialogContent>
        <IComponentInstanceList Components="_components" OnComponentSelected="ComponentSelected" />
    </DialogContent>
    <DialogActions>
        <MudSpacer />
        <MudButton OnClick="ChooseWidgetToLink">Choose widget</MudButton>
        <MudSpacer />
        <MudButton OnClick="Submit">Ok</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    private List<Lionk.Core.Component.IComponent> _components => ComponentService.GetInstancesOfType<Lionk.Core.Component.IComponent>().ToList();
    private Lionk.Core.Component.IComponent? _selectedComponent;
    Tuple<string, Type>? DashboardItemDefinition;

    private void ComponentSelected(Lionk.Core.Component.IComponent? component)
    {
        _selectedComponent = component;
    }

    private void Submit()
    {
        if (MudDialog is null) return;
        if (DashboardItemDefinition is null)
        {
            Snackbar.Add("Please select a widget", Severity.Error);
            return;
        }
        MudDialog.Close(DialogResult.Ok(DashboardItemDefinition));
    }

    private void Cancel()
    {
        if (MudDialog is null) return;
        MudDialog.Cancel();
    }

    private async Task ChooseWidgetToLink()
    {
        if (_selectedComponent is null)
        {
            Snackbar.Add("Please select a widget", Severity.Error);
            return;
        }

        DialogParameters parameters = new();
        parameters.Add("ComponentType", _selectedComponent.GetType());

        var dialogReference = DialogService.Show<WidgetSelector>("Widget Selection", parameters);

        var dialogResult = await dialogReference.Result;

        ComponentViewDescription? selectedWidget = dialogResult?.Data as ComponentViewDescription;

        ArgumentNullException.ThrowIfNull(selectedWidget?.ViewType);

        DashboardItemDefinition = new(_selectedComponent.InstanceName, selectedWidget.ViewType);
    }
}
