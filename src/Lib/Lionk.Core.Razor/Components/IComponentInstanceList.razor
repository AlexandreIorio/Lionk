@namespace Lionk.Core.Razor
@using Lionk.Core.Component
@using MudBlazor
@using System.Collections.ObjectModel
@inject IComponentService ComponentService

@using IComponent = Lionk.Core.Component.IComponent

<ListSearcher Items="@_components"
              Properties="@Properties"
              PropertiesFriendlyNames="@PropertiesFriendlyNames"
              ItemsChanged="ItemsChanged"
              T="IComponent" />

<MudTable @ref="_table"
          T="IComponent"
          Items="@_components"
          OnRowClick="@RowClicked">
    <RowTemplate>
        <MudTr class="@(context == _selectedComponent && !_isEditing ? "selected-row" : "")">
            <MudTd><MudIcon Icon="@Icons.Material.Filled.AutoAwesomeMosaic" /></MudTd>
            <MudTd>
                <MudTextField @bind-Value="context.InstanceName"
                              Label="Name"
                              Variant="Variant.Outlined"
                              Immediate="true"
                              OnKeyDown="StartEditing"
                              OnBlur="StopEditing" />
            </MudTd>
            <MudTd DataLabel="Component type">@GetComponentName(context)</MudTd>
        </MudTr>
    </RowTemplate>
</MudTable>

@code {
    [Parameter]
    public IEnumerable<IComponent> Components { get; set; } = new List<IComponent>();

    [Parameter]
    public EventCallback<IComponent> OnComponentSelected { get; set; }

    private MudTable<IComponent> _table = new();
    private List<IComponent> _components = new List<IComponent>();
    private List<string> Properties = new List<string> { nameof(IComponent.InstanceName) };
    private List<string> PropertiesFriendlyNames = new List<string> { "Instance Name" };

    private IComponent? _selectedComponent;

    protected override void OnParametersSet()
    {
        if (Components != null)
        {
            _components = Components.ToList();
            StateHasChanged();
        }
    }

    private bool _isEditing = false;

    private void StartEditing()
    {
        _isEditing = true;
    }

    private void StopEditing()
    {
         _isEditing = false;
        StateHasChanged();
    }

    private void ItemsChanged(List<IComponent> items)
    {
        _components = items;
        StateHasChanged();
    }

    private void RowClicked(TableRowClickEventArgs<IComponent> item)
    {
        if (!_isEditing)
        {
            var component = item.Item;
            if (component is null) return;
            _selectedComponent = component;

            OnComponentSelected.InvokeAsync(component);
            StateHasChanged();
        }
    }

    private string GetComponentName(IComponent component)
    {
        string name = ComponentService
        .GetRegisteredTypeDictionnary()?
        .Where(x => x.Key.Type == component.GetType())
        .First().Key.Name ?? "Unknown";

        return name;
    }
}

<style>
    .selected-row {
        background-color: #007acc;
        color: #ffffff;
        font-weight: bold;
        border: 2px solid #005b99;
    }
</style>
