@using Lionk.Core.View
@namespace Lionk.Core.Dialog

<MudDialog Style="height:50%">
    <DialogContent>
        <MudCarousel ShowArrows="true"
                     ShowBullets="false"
                     EnableSwipeGesture="true"
                     AutoCycle="false"
                     TData="object"
                     SelectedIndexChanged="ViewChanged"
                     Style="height:100%"
                     SelectedIndex="CurrentIndex">

            @if (ViewDescriptions is not null && ViewDescriptions.Count > 0)
            {
                foreach (ComponentViewDescription viewDescription in ViewDescriptions.OfType<ComponentViewDescription>())
                {
                    <MudCarouselItem Style="padding-left:50px; padding-right:50px; overflow-y: scroll;">
                        <MudGrid Style="width:inherit%">
                            <MudItem>
                                <MudText Typo="Typo.h6">@viewDescription.Name</MudText>
                            </MudItem>
                            <MudItem Style="width:inherit">
                                <DynamicComponentWrapper Type="@viewDescription.ViewType" Parameters="_parameter"/>
                            </MudItem>
                        </MudGrid>
                    </MudCarouselItem>
                }
            }
        </MudCarousel>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    /// <summary>
    ///     The component to display.
    /// </summary>
    [Parameter]
    public object? Component { get; set; }

    /// <summary>
    ///     The list of view descriptions.
    /// </summary>
    [Parameter]
    public List<ComponentViewDescription>? ViewDescriptions { get; set; }

    /// <summary>
    ///     The index of the currently selected view.
    /// </summary>
    [Parameter]
    public int CurrentIndex { get; set; }

    private readonly Dictionary<string, object> _parameter = new();

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        if (Component is null) return;
        _parameter.Add("Component", Component);
        if (CurrentIndex >= ViewDescriptions?.Count) CurrentIndex = 0;
    }

    private void Submit()
    {
        MudDialog?.Close(DialogResult.Ok(CurrentIndex));
    }

    private void ViewChanged(int index)
    {
        CurrentIndex = index;
    }

}