@namespace Lionk.Core.Razor
@using Lionk.Core.Component
@using Lionk.Core.TypeRegister
@using System.Collections.ObjectModel

<ListSearcher Items="@_componentTypeDescriptions"
              Properties="@Properties"
              PropertiesFriendlyNames="@PropertiesFriendlyNames"
              ItemsChanged="ItemsChanged"
              T="ComponentTypeDescription" />

<MudTable @ref="_table"
          T="ComponentTypeDescription"
          Items="@_componentTypeDescriptions"
          OnRowClick="@RowClicked">
    <HeaderContent>
        <MudText Align="Align.Left">Type Name</MudText>
    </HeaderContent>

    <RowTemplate>
        <MudTooltip Text="@context.Description" Placement="Placement.Right">
            <MudTr Class="@(context == _selectedComponent ? "selected-row" : "")">
                <MudTd><MudIcon Icon="@Icons.Material.Filled.AutoAwesomeMosaic" /></MudTd>
                <MudTd DataLabel="Type Name">@context.Name</MudTd>
            </MudTr>
        </MudTooltip>
    </RowTemplate>

    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
    </PagerContent>
    <FooterContent>
    </FooterContent>
</MudTable>

@code {
    /// <summary>
    /// The types registry used to display the components.
    /// </summary>
    [Parameter]
    public IReadOnlyDictionary<ComponentTypeDescription, Factory> TypesRegistry { get; set; } = new Dictionary<ComponentTypeDescription, Factory>();

    /// <summary>
    /// Method to call when a component is selected.
    /// </summary>
    [Parameter]
    public EventCallback<KeyValuePair<ComponentTypeDescription, Factory>> OnComponentSelected { get; set; }

    private MudTable<ComponentTypeDescription> _table = new();
    private List<ComponentTypeDescription> _componentTypeDescriptions = new List<ComponentTypeDescription>();
    private List<string> Properties = new List<string> {nameof(NamedElement.Name), nameof(NamedElement.Description)};
    private List<string> PropertiesFriendlyNames = new List<string> { "Type Name", "Description" };

    private ComponentTypeDescription? _selectedComponent;

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        _componentTypeDescriptions = TypesRegistry.Keys.ToList();
        StateHasChanged();
    }

    private void ItemsChanged(List<ComponentTypeDescription> items)
    {
        _componentTypeDescriptions = items;
        StateHasChanged();
    }

    private void RowClicked(TableRowClickEventArgs<ComponentTypeDescription> item)
    {
        var componentTypeDescription = item.Item;
        if (componentTypeDescription is null) return;

        _selectedComponent = componentTypeDescription;

        var factory = TypesRegistry[componentTypeDescription];
        OnComponentSelected.InvokeAsync(new KeyValuePair<ComponentTypeDescription, Factory>(componentTypeDescription, factory));
        StateHasChanged();
    }
}

<style>
    .selected-row {
        background-color: #007acc;
        color: #ffffff;
        font-weight: bold;
        border: 2px solid #005b99;
    }
</style>
