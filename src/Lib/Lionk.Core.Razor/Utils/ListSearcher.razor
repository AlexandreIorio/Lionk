@using System.Reflection
@typeparam T
@namespace Lionk.Core.Razor
@if (!_isLoaded)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudGrid>
        <MudItem>
            <MudIcon Icon="@Icons.Material.Filled.Search"/>
        </MudItem>
        <MudItem>
            <MudInput T="string" Placeholder="Search" Immediate="true" ValueChanged="OnSearchTextChanged"></MudInput>
        </MudItem>
    </MudGrid>
    <MudGrid>
        @if (_displayProperties.Count > 0)
        {
            @foreach (string property in _displayProperties)
            {
                <MudItem>
                    <MudCheckBox T="bool" @bind-Value="_selectedProperties[property]" Label="@PropertiesFriendlyNames[Properties.IndexOf(property)]"/>
                </MudItem>
            }
        }
    </MudGrid>
}

@code {

    /// <summary>
    ///     Gets or sets the items to be searched.
    /// </summary>
    [Parameter]
    public List<T> Items { get; set; } = [];

    /// <summary>
    ///     Gets or sets the properties to be searched inside the items.
    /// </summary>
    [Parameter]
    public List<string> Properties { get; set; } = [];

    /// <summary>
    ///     Gets or sets the friendly names of the properties to be displayed on the checkboxes.
    /// </summary>
    [Parameter]
    public List<string> PropertiesFriendlyNames { get; set; } = [];

    /// <summary>
    ///     The event that is triggered when the items are changed.
    /// </summary>
    [Parameter]
    public EventCallback<List<T>> ItemsChanged { get; set; }

    private Dictionary<string, bool> _selectedProperties = new();

    private List<string> _displayProperties = [];

    private List<T> _items = [];

    private string _searchText = string.Empty;

    private bool _isLoaded = false;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        foreach (string property in Properties)
        {
            PropertyInfo? propInfo = typeof(T).GetProperty(property);
            if (propInfo is null) throw new ArgumentException($"Property {property} not found in {typeof(T).Name}");

            _displayProperties.Add(property);
            _selectedProperties[property] = false;
        }

        _items = Items;
        _isLoaded = true;
        StateHasChanged();
    }

    private void OnSearchTextChanged(string value)
    {
        _searchText = value;
        FilterItems();
        ItemsChanged.InvokeAsync(Items);
    }

    private void FilterItems()
    {
        if (string.IsNullOrEmpty(_searchText))
        {
            Items = _items;
        }
        else
        {
            var selectedProps = _selectedProperties.Where(sp => sp.Value).Select(sp => sp.Key).ToList();
            if (selectedProps.Count == 0) selectedProps = Properties;

            Items = _items.Where(
                item =>
                {
                    foreach (string prop in selectedProps)
                    {
                        var propValue = typeof(T).GetProperty(prop)?.GetValue(item, null)?.ToString();
                        if (propValue != null && propValue.Contains(_searchText, StringComparison.OrdinalIgnoreCase))
                        {
                            return true;
                        }
                    }

                    return false;
                }).ToList();
        }

        StateHasChanged();
    }

}