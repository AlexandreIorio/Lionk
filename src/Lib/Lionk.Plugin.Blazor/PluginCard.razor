@using Lionk.Plugin
@using MudBlazor
<link href="_content/Lionk.Plugin.Blazor/css/PluginCard.css" rel="stylesheet" />

@if (Plugin is null)
{
    <MudCard Outlined="true" Class="mud-card-hover">
        <MudCardContent>
            <MudText Typo="Typo.h6">No plugin selected</MudText>
        </MudCardContent>
    </MudCard>
}
else
{
    <MudCard Class="floating-card" Outlined="true">
        <MudCardHeader>
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <MudText Typo="Typo.h6">@Plugin.Name</MudText>
                    <MudText Typo="Typo.subtitle2">@Plugin.Version</MudText>
                </div>
            </div>
        </MudCardHeader>
        <MudCardContent>
            @if (!Plugin.IsLoaded)
            {
                <MudTooltip Text="Something went wrong during plugin loading, you must delete and readd your plugin.">
                    <MudIconButton
                        Icon="@Icons.Material.Filled.Error"
                        Color="Color.Error"
                        Style="cursor: pointer;">
                    </MudIconButton>
                </MudTooltip>
            }

            <MudText Typo="Typo.body1">@Plugin.Description</MudText>
            <MudText Typo="Typo.body2">Author: @Plugin.Author</MudText>

            <MudCollapse Expanded="@ShowDependencies">
                <MudText Typo="Typo.caption">Dependencies:</MudText>
                <MudList T="string" Class="small-font non-selectable">
                    @foreach (var dependency in Plugin.Dependencies)
                    {
                        <MudListItem>@dependency</MudListItem>
                    }
                    }
                </MudList>
            </MudCollapse>
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ToggleDependencies">
                @(ShowDependencies ? "Hide Dependencies" : "Show Dependencies")
            </MudButton>
            <MudButton Color="Color.Error" OnClick="() => OnDelete.InvokeAsync(Plugin)">Delete</MudButton>
        </MudCardActions>
    </MudCard>
}

@code {
    private bool ShowDependencies { get; set; } = false;

    private void ToggleDependencies()
    {
        ShowDependencies = !ShowDependencies;
    }

    [Parameter]
    public Plugin? Plugin { get; set; }

    [Parameter]
    public EventCallback<Plugin> OnSelect { get; set; }

    [Parameter]
    public EventCallback<Plugin> OnDelete { get; set; }
}
