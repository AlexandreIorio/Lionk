@using System.Reflection
@using Lionk.Core.Component
@using Lionk.Core.View
@using IComponent = Lionk.Core.Component.IComponent
@inject IComponentService ComponentService
@inject IViewRegistryService ViewRegistryService
<link href="_content/Lionk.Plugin.Blazor/css/PluginCard.css" rel="stylesheet"/>

@if (Plugin is null)
{
    <MudCard Outlined="true" Class="mud-card-hover">
        <MudCardContent>
            <MudText Typo="Typo.h6">No plugin selected</MudText>
        </MudCardContent>
    </MudCard>
}
else
{
    <MudCard Class="floating-card" Outlined="true">
        <MudCardHeader>
            <div style="display: flex; align-items: center; justify-content: space-between;">
                <div>
                    <MudText Typo="Typo.h6" Style="word-wrap: break-word; overflow-wrap: break-word; word-break: break-word;">@Plugin.Name</MudText>
                    <MudText Typo="Typo.subtitle2">@Plugin.Version</MudText>
                </div>
            </div>
        </MudCardHeader>
        <MudCardContent>
            @if (!Plugin.IsLoaded)
            {
                <MudTooltip Text="Something went wrong during plugin loading, please check dependencies.">
                    <MudIconButton Icon="@Icons.Material.Filled.Error"
                                   Color="Color.Error"
                                   Style="cursor: pointer;">
                    </MudIconButton>
                </MudTooltip>
            }

            <MudText Typo="Typo.body1" Class="description-container">@Plugin.Description</MudText>
            <MudText Typo="Typo.body2">Author: @Plugin.Author</MudText>

            <MudCollapse Expanded="@ShowDependencies">
                <MudText Typo="Typo.caption">Dependencies:</MudText>
                <MudList T="string" Class="small-font non-selectable">
                    @foreach (Dependency dependency in Plugin.Dependencies)
                    {
                        <MudListItem OnClick="() => OnDependencySelectAsync(dependency)">
                            @if (dependency.IsLoaded)
                            {
                                <MudText>
                                    @dependency.AssemblyName.FullName
                                </MudText>
                            }
                            else
                            {
                                <MudText Color="Color.Error">@dependency.AssemblyName.FullName</MudText>
                            }
                        </MudListItem>
                    }
                </MudList>
            </MudCollapse>
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ToggleDependencies">
                @(ShowDependencies ? "Hide Dependencies" : "Show Dependencies")
            </MudButton>
            <MudTooltip Text="Cannot delete this plugin because some types are still in use." Disabled="!IsPluginUsed()">
                <MudButton Color="Color.Error" OnClick="() => OnDelete.InvokeAsync(Plugin)" Disabled="IsPluginUsed()">
                    Delete
                </MudButton>
            </MudTooltip>
        </MudCardActions>
    </MudCard>
}

@code {
    private bool ShowDependencies { get; set; } = false;

    private void ToggleDependencies()
    {
        ShowDependencies = !ShowDependencies;
    }

    private async Task OnDependencySelectAsync(Dependency dependency)
    {
        if (!dependency.IsLoaded)
            await OnDependencySelect.InvokeAsync(dependency);
    }

    private bool IsPluginUsed()
    {
        IEnumerable<Type>? usedTypes = Plugin?.Assembly.GetTypes().Where(x => x.GetInterfaces().Contains(typeof(IComponent)));

        IEnumerable<Type>? usedViews = Plugin?.Assembly.GetTypes().Where(x => x.GetCustomAttribute<ViewOfAttribute>() != null);

        if (usedTypes is not null)
        {
            if (usedTypes.Any(usedType => ComponentService.GetInstances().Any(x => x.GetType() == usedType)))
                return true;
        }

        if (usedViews is not null)
            return usedViews.Any(view => ViewRegistryService.HasActiveViews(view));

        return false;
    }

    /// <summary>
    ///     The plugin that is displayed in the card.
    /// </summary>
    [Parameter]
    public Plugin? Plugin { get; set; }

    /// <summary>
    ///     Parameter that is triggered when a dependency is selected.
    /// </summary>
    [Parameter]
    public EventCallback<Dependency> OnDependencySelect { get; set; }

    /// <summary>
    ///     Event that is triggered when the delete button is clicked.
    /// </summary>
    [Parameter]
    public EventCallback<Plugin> OnDelete { get; set; }

}