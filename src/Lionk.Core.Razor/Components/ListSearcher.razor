@typeparam T
@namespace Lionk.Core.Razor
@if (!_isLoaded)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudGrid>
        <MudItem>
            <MudIcon Icon="@Icons.Material.Filled.Search" />
        </MudItem>
        <MudItem>
            <MudInput T="string" Placeholder="Search" Immediate="true" ValueChanged="OnSearchTextChanged"></MudInput>
        </MudItem>
    </MudGrid>
    <MudGrid>
        @if (_displayProperties.Count > 0)
        {
            @foreach (var property in _displayProperties)
            {
                <MudItem>
                    <MudCheckBox T="bool" @bind-Value="_selectedProperties[property]" Label="@PropertiesFriendlyNames[Properties.IndexOf(property)]" />
                </MudItem>
            }
        }
    </MudGrid>
}

@code {
    /// <summary>
    /// Gets or sets the items to be searched.
    /// </summary>
    [Parameter] public List<T> Items { get; set; } = new();

    /// <summary>
    /// Gets or sets the properties to be searched inside the items.
    /// </summary>
    [Parameter] public List<string> Properties { get; set; } = new();

    /// <summary>
    /// Gets or sets the friendly names of the properties to be displayed on the checkboxes.
    /// </summary>
    [Parameter] public List<string> PropertiesFriendlyNames { get; set; } = new();

    /// <summary>
    /// The event that is triggered when the items are changed.
    /// </summary>
    [Parameter] public EventCallback<List<T>> ItemsChanged { get; set; }

    private Dictionary<string, bool> _selectedProperties = new();
    private List<string> _displayProperties = new();
    private List<T> _items = new();
    private string _searchText = "";
    private bool _isLoaded = false;

    protected override void OnInitialized()
    {

        foreach (var property in Properties)
        {
            var propInfo = typeof(T).GetProperty(property);
            if (propInfo != null)
            {
                _displayProperties.Add(property);
                _selectedProperties[property] = false;
            }
        }

        _items = Items;
        _isLoaded = true;
        StateHasChanged();
    }


    private void OnSearchTextChanged(string value)
    {
        _searchText = value;
        FilterItems();
        ItemsChanged.InvokeAsync(Items);
    }

    private void FilterItems()
    {
        if (string.IsNullOrEmpty(_searchText))
        {
            Items = _items;
        }
        else
        {
            var selectedProps = _selectedProperties.Where(sp => sp.Value).Select(sp => sp.Key).ToList();
            if (selectedProps.Count == 0) selectedProps = Properties;

            Items = _items.Where(item =>
            {
                foreach (var prop in selectedProps)
                {
                    var propValue = typeof(T).GetProperty(prop)?.GetValue(item, null)?.ToString();
                    if (propValue != null && propValue.Contains(_searchText, StringComparison.OrdinalIgnoreCase))
                    {
                        return true;
                    }
                }
                return false;
            }).ToList();
        }

        StateHasChanged();
    }
}
