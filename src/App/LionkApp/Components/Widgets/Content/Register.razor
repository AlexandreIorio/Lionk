@page "/register"
@using Lionk.Auth.Identity
@using Lionk.Auth.Utils
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@inject UserAuthenticationStateProvider AuthStateProvider
@inject UserService userService
@inject ISnackbar Snackbar

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Username" HelperText="Max. 20 characters"
                                  @bind-Value="model.Username" For="@(() => model.Username)" />
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="model.Email" For="@(() => model.Email)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Confirm Password" HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    RegisterAccountForm model = new RegisterAccountForm();

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(20, ErrorMessage = "Username length can't be more than 20 characters.")]
        public string? Username { get; set; }

        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? Password { get; set; }

        [Required]
        [Compare(nameof(Password), ErrorMessage = "The password and confirmation password do not match.")]
        public string? Password2 { get; set; }
    }

    private async Task OnValidSubmit()
    {
        if (userService.IsUsernameExist(model.Username!))
        {
            Snackbar.Add("Username already exists.", Severity.Warning);
            return;
        }

        if (userService.IsEmailExist(model.Email!))
        {
            Snackbar.Add("Email already exists.", Severity.Warning);
            return;
        }

        var salt = PasswordUtils.GenerateSalt(16);

        var passwordHash = PasswordUtils.HashPassword(model.Password!, salt);

        var registeredUser = userService.Insert(new User(model.Username!, model.Email!, passwordHash, salt, new List<string> { "User" }));

        if (registeredUser != null)
        {
            await AuthStateProvider.LoginAsync(model.Username!, passwordHash);
            model = new RegisterAccountForm();
            Snackbar.Add("Registration successfull.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Registration failed. Please try again.", Severity.Error);
        }

        StateHasChanged();
    }
}
