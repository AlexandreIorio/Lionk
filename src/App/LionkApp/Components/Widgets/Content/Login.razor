@using Lionk.Auth.Identity
@using Lionk.Auth.Utils
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavManager
@inject UserAuthenticationStateProvider AuthStateProvider

<MudGrid>
    <MudItem xs="12" sm="12">
        <MudPaper Class="pa-4">
            <MudTextField @bind-Value="Username" Label="Username" Required="true" InputType="InputType.Text" Class="mb-2" />
            <MudTextField @bind-Value="Password" Label="Password" Required="true" InputType="InputType.Password" Class="mb-2" />
            <div style="display: flex; justify-content: flex-end; margin-top: 20px;">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="HandleValidSubmit">Login</MudButton>
            </div>
            <MudText Color="Color.Error" Typo="Typo.caption" Align="Align.Left">@ErrorMessage</MudText>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public string? Username { get; set; }
    public string? Password { get; set; }
    public string? ErrorMessage { get; set; }
    private readonly string _mainPageRoute = "/";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        bool isAuthenticated = authState?.User?.Identity?.IsAuthenticated ?? false;
        if (!isAuthenticated)
        {
            string salt = PasswordUtils.GenerateSalt(16);
            string passwordHash = PasswordUtils.HashPassword("admin", salt);
            base.OnInitialized();
        }
        else
        {
            NavManager.NavigateTo(_mainPageRoute);
        }
    }

    public async Task LoginAsync(string userName, string password)
    {
        string salt = UserService.GetUserSalt(userName);
        string passwordHash = PasswordUtils.HashPassword(password, salt);
        await AuthStateProvider.LoginAsync(userName, passwordHash);
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        bool isAuthenticated = authState?.User?.Identity?.IsAuthenticated ?? false;
        if (isAuthenticated)
        {
            NavManager.NavigateTo(_mainPageRoute);
        }
        else
        {
            ErrorMessage = "Invalid username or password.";
            StateHasChanged();
        }
    }

    private async void HandleValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
        {
            ErrorMessage = "Username and password are required.";
            return;
        }
        await LoginAsync(Username, Password);
    }
}
