@page "/login"
@using Lionk.Auth.Abstraction
@using Lionk.Auth.Identity
@using Lionk.Auth.Utils
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject UserAuthenticationStateProvider AuthStateProvider

<EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Username" @bind-Value="Model.Username" For="@(() => Model.Username)" />
                    <MudTextField Label="Password" Class="mt-3" @bind-Value="Model.Password" For="@(() => Model.Password)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    RegisterAccountForm Model = new RegisterAccountForm();

    public class RegisterAccountForm
    {
        [Required(ErrorMessage = "Username is required.")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string? Password { get; set; }
    }

    private readonly string _mainPageRoute = "/";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        bool isAuthenticated = authState?.User?.Identity?.IsAuthenticated ?? false;
        if (!isAuthenticated)
        {
            base.OnInitialized();
        }
        else
        {
            NavManager.NavigateTo(_mainPageRoute);
        }
    }

    public async Task LoginAsync(string userName, string password)
    {
        string salt = UserService.GetUserSalt(userName);
        string passwordHash = PasswordUtils.HashPassword(password, salt);
        await AuthStateProvider.LoginAsync(userName, passwordHash);
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        bool isAuthenticated = authState?.User?.Identity?.IsAuthenticated ?? false;
        if (isAuthenticated)
        {
            NavManager.NavigateTo(_mainPageRoute);
        }
        else
        {
            Snackbar.Add("Invalid username or password.", Severity.Warning);
            StateHasChanged();
        }
    }

    private async void OnValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(Model.Username) || string.IsNullOrWhiteSpace(Model.Password))
        {
            Snackbar.Add("Username and password are required.", Severity.Warning);
            return;
        }
        await LoginAsync(Model.Username, Model.Password);
    }
}
