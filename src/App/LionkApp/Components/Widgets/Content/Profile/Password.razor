@page "/password"
@using Lionk.Auth.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@inject UserAuthenticationStateProvider AuthStateProvider
@inject ISnackbar Snackbar

<EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Old password" HelperText="Please enter your old password" Class="mt-3"
                                  @bind-Value="Model.OldPassword" For="@(() => Model.OldPassword)" InputType="InputType.Password" />
                    <MudTextField Label="New password" HelperText="Please enter your new password" Class="mt-3"
                                  @bind-Value="Model.Password" For="@(() => Model.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Confirm password" HelperText="Please confirm your new password" Class="mt-3"
                                  @bind-Value="Model.Password2" For="@(() => Model.Password2)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to save your changes.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    RegisterAccountForm Model = new RegisterAccountForm();

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? OldPassword { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? Password { get; set; }

        [Required]
        [Compare(nameof(Password), ErrorMessage = "The password and confirmation password do not match.")]
        public string? Password2 { get; set; }
    }

    private void OnValidSubmit()
    {
        if (!string.IsNullOrEmpty(Model.Password))
        {
            AuthStateProvider.CurrentUser?.UpdatePasswordHash(Model.Password);
            Snackbar.Add("Password updated successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to update password. Please try again.", Severity.Error);
        }

        Model = new RegisterAccountForm();
        StateHasChanged();
    }
}
