@page "/password"
@using System.ComponentModel.DataAnnotations
@using Lionk.Auth.Abstraction
@using Lionk.Auth.Identity
@using Lionk.Auth.Utils
@inject UserAuthenticationStateProvider AuthStateProvider
@inject IUserService UserService
@inject ISnackbar Snackbar

<EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem>
            <MudCard Style="width: 600px">
                <MudCardContent>
                    <MudTextField T="string" Label="Old password" @bind-Value="_model.OldPassword" For="@(() => _model.OldPassword ?? string.Empty)" InputType="InputType.Password"/>
                </MudCardContent>
                <MudCardContent>
                    <MudTextField T="string" Label="New password" Class="mt-3" @bind-Value="_model.NewPassword" For="@(() => _model.NewPassword ?? string.Empty)" InputType="InputType.Password"/>
                </MudCardContent>
                <MudCardContent>
                    <MudTextField T="string" Label="Confirm password"Class="mt-3" @bind-Value="_model.ConfirmPassword" For="@(() => _model.ConfirmPassword ?? string.Empty)" InputType="InputType.Password"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to save your changes.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private RegisterAccountForm _model = new();

    /// <summary>
    /// Class that represents the register account form.
    /// </summary>
    public class RegisterAccountForm
    {
        /// <summary>
        /// The old password.
        /// </summary>
        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? OldPassword { get; set; }

        /// <summary>
        /// The new password.
        /// </summary>
        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? NewPassword { get; set; }

        /// <summary>
        /// The confirmation password.
        /// </summary>
        [Required]
        [Compare(nameof(NewPassword), ErrorMessage = "The password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }

    private void OnValidSubmit()
    {
        User? user = AuthStateProvider.CurrentUser;

        if (user == null || string.IsNullOrEmpty(user.Salt))
        {
            Snackbar.Add("User is not authenticated or user data is invalid.", Severity.Error);
            return;
        }

        if (string.IsNullOrEmpty(_model.OldPassword) || string.IsNullOrEmpty(_model.NewPassword))
        {
            Snackbar.Add("Old and new passwords cannot be empty.", Severity.Warning);
            return;
        }

        string oldPasswordHash = PasswordUtils.HashPassword(_model.OldPassword, user.Salt);
        if (oldPasswordHash != user.PasswordHash)
        {
            Snackbar.Add("The old password is incorrect.", Severity.Warning);
            return;
        }

        string newPasswordHash = PasswordUtils.HashPassword(_model.NewPassword, user.Salt);
        user.UpdatePasswordHash(newPasswordHash);
        UserService.Update(user);
        _model = new RegisterAccountForm();
        Snackbar.Add("Password updated successfully", Severity.Success);

        StateHasChanged();
    }

}