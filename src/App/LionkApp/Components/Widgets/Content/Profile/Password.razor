@page "/password"
@using Lionk.Auth.Identity
@using Lionk.Auth.Utils
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@inject UserAuthenticationStateProvider AuthStateProvider
@inject UserService userService
@inject ISnackbar Snackbar

<EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem>
            <MudCard Style="width: 600px">
                <MudCardContent>
                    <MudTextField T="string" Label="Old password" @bind-Value="Model.OldPassword" For="@(() => Model.OldPassword)" InputType="InputType.Password" />
                </MudCardContent>
                 <MudCardContent>
                    <MudTextField T="string" Label="New password" Class="mt-3" @bind-Value="Model.NewPassword" For="@(() => Model.NewPassword)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardContent>
                    <MudTextField T="string" Label="Confirm password"Class="mt-3" @bind-Value="Model.ConfirmPassword" For="@(() => Model.ConfirmPassword)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to save your changes.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    RegisterAccountForm Model = new RegisterAccountForm();

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? OldPassword { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string? NewPassword { get; set; }

        [Required]
        [Compare(nameof(NewPassword), ErrorMessage = "The password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; }
    }

    private void OnValidSubmit()
    {
        ArgumentNullException.ThrowIfNull(AuthStateProvider.CurrentUser?.Salt);

        if (string.IsNullOrEmpty(Model.OldPassword) || string.IsNullOrEmpty(Model.NewPassword))
        {
            Snackbar.Add("Old and new password cannot be empty.", Severity.Warning);
        }
        else if (PasswordUtils.HashPassword(Model.OldPassword, AuthStateProvider.CurrentUser.Salt) != AuthStateProvider.CurrentUser?.PasswordHash)
        {
            Snackbar.Add("The old password is incorrect.", Severity.Warning);
        }
        else
        {
            string hash = PasswordUtils.HashPassword(Model.NewPassword, AuthStateProvider.CurrentUser.Salt);
            AuthStateProvider.CurrentUser?.UpdatePasswordHash(hash);
            Model = new();

            Snackbar.Add("Password updated successfully", Severity.Success);
            StateHasChanged();
        }
    }
}
