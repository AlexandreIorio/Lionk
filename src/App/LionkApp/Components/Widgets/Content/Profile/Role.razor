@page "/role"
@using Lionk.Auth.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject ISnackbar Snackbar
@inject UserAuthenticationStateProvider AuthStateProvider
@inject UserService userService

@if (Users != null)
{
    <MudContainer>
        <MudTable Items="Users" Bordered="true" Dense="true" Hover="true">
            <HeaderContent>
                <MudTh>Username</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Roles</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Username</MudTd>
                <MudTd>@context.Email</MudTd>
                <MudTd>
                    <div>
                        @foreach (var role in AvailableRoles)
                        {
                            <div style="display: inline-flex; align-items: center; margin-right: 16px;">
                                <span style="margin-right: 8px;">@role</span>
                                <MudSwitch T="bool" @bind-Value="RoleStates[context.Id][role]" Color="Color.Primary" />
                            </div>
                        }
                    </div>
                </MudTd>
            </RowTemplate>
        </MudTable>

        <div style="text-align: right; margin-top: 20px;">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveUsers">
                Save
            </MudButton>
        </div>
    </MudContainer>
}
else
{
    <MudText Typo="Typo.body1" Align="Align.Left" Style="margin: 20px; font-size: 14px;">Loading users...</MudText>
}

@code {
    public HashSet<User>? Users;
    private List<string> AvailableRoles = new List<string> { "Admin", "User", "Moderator" }; // TODO - Link to enum or global strings
    private Dictionary<Guid, Dictionary<string, bool>> RoleStates = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        InitializeRoleStates();
    }

    private void InitializeRoleStates()
    {
        Users = userService.GetUsers();

        if (Users != null)
        {
            foreach (var user in Users)
            {
                RoleStates[user.Id] = new Dictionary<string, bool>();
                foreach (var role in AvailableRoles)
                {
                    RoleStates[user.Id][role] = user.Roles.Contains(role);
                }
            }
        }
    }

    private void SaveUser(User user)
    {
        foreach (var role in AvailableRoles)
        {
            bool currentRoleState = RoleStates[user.Id][role];

            // Add role
            if (currentRoleState && !user.Roles.Contains(role))
            {
                user.AddRole(role);
            }

            // Remove role
            if (!currentRoleState && user.Roles.Contains(role))
            {
                if (role == "Admin")
                {
                    Snackbar.Add("You cannot remove the admin role", Severity.Warning);
                    return;
                }

                if (user.Roles.Count <= 1)
                {
                    Snackbar.Add("You cannot remove the only role", Severity.Warning);
                    return;
                }

                user.RemoveRole(role);
            }

        }

        userService.Update(user);
    }

    private void SaveUsers()
    {
        if (Users != null)
        {
            foreach (var user in Users)
            {
                SaveUser(user);
            }
        }

        Snackbar.Add("The user's roles have been successfully updated.", Severity.Success);
  
        StateHasChanged();
    }
}
