@page "/role"
@using Lionk.Auth.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject UserAuthenticationStateProvider AuthStateProvider
@inject UserService userService

@if (Users != null)
{
    <MudTable Items="Users" Bordered="true" Dense="true" Hover="true">
        <HeaderContent>
            <MudTh Style="text-align: center; font-size: 14px;">Username</MudTh>
            <MudTh Style="text-align: center; font-size: 14px;">Email</MudTh>
            <MudTh Style="text-align: center; font-size: 14px;">Roles</MudTh>
            <MudTh Style="text-align: center; font-size: 14px;">Add Role</MudTh>
            <MudTh Style="text-align: center; font-size: 14px;">Delete Role</MudTh>
            <MudTh Style="text-align: center; font-size: 14px;">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Style="font-size: 14px;">@context.Username</MudTd>
            <MudTd Style="font-size: 14px;">@context.Email</MudTd>
            <MudTd>
                <MudList T="string" Style="display: inline-block; font-size: 14px;">
                    @foreach (var role in @context.Roles)
                    {
                        <MudListItem>
                            <div style="display: flex; font-size: 14px;">
                                <span>@role</span>
                            </div>
                        </MudListItem>
                    }
                </MudList>
            </MudTd>
            <MudTd>
                <MudSelect T="string" @bind-Value="RoleToAdd" Dense="true" Style="width: 150px; font-size: 14px;">
                    @foreach (var role in AvailableRoles)
                    {
                        <MudSelectItem Value="@role" Style="font-size: 14px;">@role</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd>
                <MudSelect T="string" @bind-Value="RoleToDelete" Dense="true" Style="width: 150px; font-size: 14px;">
                    @foreach (var role in @context.Roles)
                    {
                        <MudSelectItem Value="@role" Style="font-size: 14px;">@role</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
            <MudTd>
                <div style="display: flex; align-items: center; margin-top: 8px;">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="margin-right: 10px; font-size: 14px;" OnClick="() => SaveUser(context)">
                        SAVE
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" Style="font-size: 14px;" OnClick="() => DeleteUser(context.Id)">
                        DELETE
                    </MudButton>
                </div>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudText Typo="Typo.body1" Align="Align.Left" Style="margin: 20px; font-size: 14px;">Loading users...</MudText>
}

@code {
    public HashSet<User>? Users;
    private List<string> AvailableRoles = new List<string> { "Admin", "User", "Moderator" };
    private string? RoleToAdd;
    private string? RoleToDelete;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Users = userService.GetUsers();
    }

    private void AddRole(User user)
    {
        if (!string.IsNullOrEmpty(RoleToAdd) && !user.Roles.Contains(RoleToAdd))
        {
            user.AddRole(RoleToAdd);
        }
    }

    private void RemoveRole(User user)
    {
        if (!string.IsNullOrEmpty(RoleToDelete) && user.Roles.Contains(RoleToDelete))
        {
            user.RemoveRole(RoleToDelete);
        }
    }

    private void SaveUser(User user)
    {
        AddRole(user);
        RemoveRole(user);
        userService.Update(user);

        RoleToAdd = null;
        RoleToDelete = null;

        StateHasChanged();
    }

    private void DeleteUser(Guid userId)
    {
        var userToRemove = Users?.FirstOrDefault(u => u.Id == userId);

        if (userToRemove != null)
        {
            userService.Delete(userToRemove);

            StateHasChanged();
        }
    }
}
