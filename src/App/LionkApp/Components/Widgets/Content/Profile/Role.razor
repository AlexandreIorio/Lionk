@page "/role"
@using Lionk.Auth.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject ISnackbar Snackbar
@inject UserAuthenticationStateProvider AuthStateProvider
@inject UserService userService

@if (Users != null)
{
    <MudTable Items="Users" Bordered="true" Dense="true" Hover="true">
        <HeaderContent>
            <MudTh Style="text-align: center; font-size: 14px;">Username</MudTh>
            <MudTh Style="text-align: center; font-size: 14px;">Email</MudTh>
            <MudTh Style="text-align: center; font-size: 14px;">Roles</MudTh>
            <MudTh Style="text-align: center; font-size: 14px;"></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Style="font-size: 14px;">@context.Username</MudTd>
            <MudTd Style="font-size: 14px;">@context.Email</MudTd>
            <MudTd>
                <div style="display: flex; align-items: center;">
                    @foreach (var role in AvailableRoles)
                    {
                        <div style="display: inline-flex; align-items: center; font-size: 14px; margin-right: 16px;">
                            <span style="margin-right: 8px;">@role</span>
                            <MudSwitch T="bool" @bind-Value="RoleStates[context.Id][role]" Color="Color.Primary" />
                        </div>
                    }
                </div>
            </MudTd>
            <MudTd>
                <div style="display: flex; align-items: center; margin-top: 8px;">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="margin-right: 10px; font-size: 14px;" OnClick="() => SaveUser(context)">
                        SAVE
                    </MudButton>
                </div>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudText Typo="Typo.body1" Align="Align.Left" Style="margin: 20px; font-size: 14px;">Loading users...</MudText>
}

@code {
    public HashSet<User>? Users;
    private List<string> AvailableRoles = new List<string> { "Admin", "User", "Moderator" };
    private Dictionary<Guid, Dictionary<string, bool>> RoleStates = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Users = userService.GetUsers();

        if (Users != null)
        {
            foreach (var user in Users)
            {
                RoleStates[user.Id] = new Dictionary<string, bool>();
                foreach (var role in AvailableRoles)
                {
                    RoleStates[user.Id][role] = user.Roles.Contains(role);
                }
            }
        }
    }

    private void SaveUser(User user)
    {
        foreach (var role in AvailableRoles)
        {
            bool currentRoleState = RoleStates[user.Id][role];

            if (currentRoleState && !user.Roles.Contains(role))
            {
                user.AddRole(role);
            }
            else if (!currentRoleState && user.Roles.Contains(role))
            {
                if (user.Roles.Count > 1 || role != "Admin")
                {
                    user.RemoveRole(role);
                }
                else
                {
                    Snackbar.Add("You cannot remove the last remaining role or the Admin role.", Severity.Warning);
                }
            }
        }

        userService.Update(user);
        Snackbar.Add("User roles updated successfully.", Severity.Success);
        StateHasChanged();
    }
}
