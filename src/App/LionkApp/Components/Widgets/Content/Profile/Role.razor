@page "/role"

<div style="width: 600px;">
    <MudDataGrid T="Element" Items="@Elements.Take(4)" ReadOnly="@_readOnly" EditMode="DataGridEditMode.Form"
                 StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                 Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.Manual">
        <Columns>
            <PropertyColumn Property="x => x.Email" Editable="false" />
            <PropertyColumn Property="x => x.Role">
                <EditTemplate>
                    <div style="width: 400px;">
                        <MudSelect @bind-Value="context.Item.Role" Required RequiredError="You must select a Role" Margin="@Margin.Normal">
                            <MudSelectItem Value="0">User</MudSelectItem>
                            <MudSelectItem Value="1">Admin</MudSelectItem>
                        </MudSelect>
                    </div>
                </EditTemplate>
            </PropertyColumn>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</div>

@*
<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class="d-flex">
                <MudSpacer/>
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>
*@

@code {
    public class Element
    {
        public string? Email { get; set; }
        public int Role { get; set; }
    }

    private IEnumerable<Element> Elements = new List<Element>
    {
        new Element { Email = "toto@gmail.com", Role = 0},
        new Element { Email = "toto@gmail.com", Role = 0},
        new Element { Email = "toto@gmail.com", Role = 0},
        new Element { Email = "toto@gmail.com", Role = 1}
    };
    private bool _readOnly = false;
    private List<string> _events = new();

    @*
     TODO - Use OnInitializedAsync for retrieving info
     protected override async Task OnInitializedAsync()
     {
         Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
     }
     *@

    // events
    void StartedEditingItem(Element item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Element item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(Element item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
}
