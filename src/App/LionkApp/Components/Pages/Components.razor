@page "/components"
@using LionkApp.Components.Widgets.Dialogs
@using MudBlazor
@using Lionk.Core.Component
@using Lionk.Core.TypeRegistery
@using System.Collections
@inject IComponentService ComponentService

@using IComponent = Lionk.Core.Component.IComponent

<MudGrid>
    <MudItem xs="6">
        <MudPaper Class="pa-4">
            <MudGrid>
                <MudItem xs="12" md="8">
                    <MudText Typo="Typo.h4">Component Manager</MudText>
                </MudItem>
                <MudItem xs="12" md="4" Class="d-flex justify-end">
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Primary"
                               OnClick="AddComponent"
                               Disabled="@(_selectedComponent == null)">
                        Add selected
                    </MudButton>
                </MudItem>
            </MudGrid>

            <ComponentList TypesRegistery="@TypesRegistery"
                           OnComponentSelected="OnComponentSelected" />
        </MudPaper>
    </MudItem>

    <MudItem xs="6">
        <MudPaper Class="pa-4">
            <MudGrid>
                <MudItem xs="12" md="8">
                    <MudText Typo="Typo.h4">Existing components</MudText>
                </MudItem>
                <MudItem xs="12" md="4" Class="d-flex justify-end">
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Secondary"
                               OnClick="DeleteComponent"
                               Disabled="@(_selectedComponent == null)">
                        Delete selected
                    </MudButton>
                </MudItem>
            </MudGrid>

            <IComponentInstanceList Components="InstantiatedComponents"
                                    OnComponentSelected="OnComponentSelectedInstance"/>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private IReadOnlyDictionary<ComponentTypeDescription, Factory>? TypesRegistery
        => ComponentService.GetRegisteredTypeDictionnary();

    private KeyValuePair<ComponentTypeDescription, Factory>? _selectedComponent;
    private IComponent? _selectedInstanceComponent;

    private IEnumerable<Lionk.Core.Component.IComponent> InstantiatedComponents => ComponentService.GetInstances();

    protected override async Task OnInitializedAsync()
    {
        await LoadComponentTypes();
        ComponentService.NewComponentAvailable += (s, e) => OnNewTypesAvailable();
    }

    private async Task LoadComponentTypes()
    {
        await InvokeAsync(StateHasChanged);
    }

    private void OnNewTypesAvailable()
    {
        StateHasChanged();
    }

    private void AddComponent()
    {
        if (_selectedComponent.HasValue)
        {
            var factory = _selectedComponent.Value.Value;
            factory.CreateInstance();
            StateHasChanged();
        }
    }

    private void DeleteComponent()
    {
        if (_selectedInstanceComponent is not null)
        {
            // TODO : Component must implement IDisposable to delete component correctly
            ComponentService.UnregisterComponentInstance(_selectedInstanceComponent);
            StateHasChanged();
        }
    }

    private void OnComponentSelected(KeyValuePair<ComponentTypeDescription, Factory> selectedComponent)
    {
        _selectedComponent = selectedComponent;
        StateHasChanged();
    }

    private void OnComponentSelectedInstance(IComponent component)
    {
        _selectedInstanceComponent = component;
        StateHasChanged();
    }

    public void Dispose()
        => ComponentService.NewComponentAvailable -= (s, e) => OnNewTypesAvailable();
}
