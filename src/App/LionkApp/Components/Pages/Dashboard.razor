@page "/"
@inject ISnackbar Snackbar
@inject IComponentService ComponentService
@inject IDialogService DialogService
@using Lionk.Core.Component
@using Lionk.Core.View
@using LionkApp.Components.Model
@using IComponent = Lionk.Core.Component.IComponent
@using LionkApp.Components.Widgets.Dialogs

<PageTitle>Dashboard</PageTitle>
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">

    @foreach (var item in DashboardRegistry)
    {
        IComponent? component = ComponentService.GetInstanceByName(item.ComponentInstanceName);
        Type view = item.ViewType;

        if (component is not null && view is not null)
        {
            var parameters = new Dictionary<string, object>
            {
                { "Component", component }
            };

            <DynamicComponent Type="view" Parameters="parameters" />
        }
    }

</MudContainer>

<MudFab @onclick="OpenDialogAsync" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Large" Style="position: fixed; bottom: 20px; right: 20px;" />

@code {
    public List<DashboardItemModel> DashboardRegistry { get; set; } = new();

    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true };
        var parameters = new DialogParameters();
        var dialog = DialogService.Show<WidgetAdder>("Widget selection", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            var newWidget = result.Data as DashboardItemModel;
            if (newWidget != null)
            {
                DashboardRegistry.Add(newWidget);
                StateHasChanged();
            }
        }
    }
}