@page "/"
@inject ISnackbar Snackbar
@inject ICyclicExecutorService CyclicExecutorService
@inject IComponentService ComponentService
@inject IDialogService DialogService
@using Lionk.Core.Component
@using Lionk.TemperatureSensor
@using LionkApp.Components.Widgets.Buttons
@using LionkApp.Components.Widgets.DashboardItem

<PageTitle>Dashboard</PageTitle>
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <DashboardItem ConfigurationClicked="HandleConfigurationClicked">
                <DynamicComponent Type="type" @ref=dynamicComponent Parameters="parameters" />
            </DashboardItem>

        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%"></MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<FloatingButton />

@code {
    SimulatedTemperatureSensor sensor = new SimulatedTemperatureSensor();
    Dictionary<string, object> parameters = new Dictionary<string, object>();
    Type? type;
    private DynamicComponent? dynamicComponent;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        ComponentService.RegisterComponentInstance(sensor);
        CyclicExecutorService.Start();
        type = typeof(TemperatureSensorWidget);
        parameters.Add("Sensor", sensor);
        if (dynamicComponent is null)
        {
            dynamicComponent = null;
        }
    }

    private async Task HandleConfigurationClicked()
    {
        if (dynamicComponent?.Instance is IConfigurableComponent configurableComponent)
        {
            await configurableComponent.OpenConfiguration();
        }
    }

}