@page "/"
@inject ISnackbar Snackbar
@inject ICyclicExecutorService CyclicExecutorService
@inject IComponentService ComponentService
@inject IDialogService DialogService
@using Lionk.Core.Component
@using Lionk.Utils;
@using Lionk.TemperatureSensor
@using LionkApp.Components.Widgets.Buttons

<PageTitle>Dashboard</PageTitle>
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">

    @if (DashBoardItemsModels != null)
    {
        int i = 0;
        @foreach (var item in DashBoardItemsModels)
        {

            Dictionary<string, object> parameters = new();
            if (item.PropertyAndInstanceName != null)
            {
                foreach (var parameter in item.PropertyAndInstanceName)
                {
                    object? obj = ComponentService.GetInstanceByName(parameter.Value);
                    if (obj != null)
                    {
                        parameters.Add(parameter.Key, obj);
                    }
                }
            }

            <DashboardItem 
                           ConfigurableClicked="() => HandleConfigurableClicked(dynamicComponentInstances[i])"
                           DetailableClicked="() => HandleDetailableClicked(dynamicComponentInstances[i])"
                           PageableClicked="() => HandlePageableClicked(dynamicComponentInstances[i])"
                           ExecutableClicked="() => HandleExecutableClicked(dynamicComponentInstances[i])">

                <DynamicComponent Type="@item.View" @ref=dynamicComponentInstances[i] Parameters="parameters"/>
            </DashboardItem>
        }
    }

</MudContainer>

<FloatingButton />

@code {

    List<DashBoardItemModel>? DashBoardItemsModels = new List<DashBoardItemModel>();
    volatile private Dictionary<int, DynamicComponent> dynamicComponentInstances = new Dictionary<int, DynamicComponent>();
    volatile private List<DashboardItem> dashboardItems = new List<DashboardItem>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RestoreModels();
    }

    private void RestoreModels()
    {
        string json = ConfigurationUtils.ReadFile("dashboard.json", FolderType.Data);
        DashBoardItemsModels = Newtonsoft.Json.JsonConvert.DeserializeObject<List<DashBoardItemModel>>(json);
        for (int i = 0; i < DashBoardItemsModels?.Count; i++)
        {
            dynamicComponentInstances.Add(i, new DynamicComponent());
        }
    }

    private async Task HandleConfigurableClicked(DynamicComponent? dynamicComponent)
    {
        if (dynamicComponent?.Instance is IConfigurableComponent configurableComponent)
        {
            await configurableComponent.OpenConfiguration();
        }
    }

    private async Task HandleDetailableClicked(DynamicComponent? dynamicComponent)
    {
        if (dynamicComponent?.Instance is IDetailableComponent configurableComponent)
        {
            await configurableComponent.OpenDetail();
        }
    }

    private async Task HandlePageableClicked(DynamicComponent? dynamicComponent)
    {
        if (dynamicComponent?.Instance is IPageableComponent pageableComponent)
        {
            await pageableComponent.OpenComponentPage();
        }
    }

    private void HandleExecutableClicked(DynamicComponent? dynamicComponent)
    {
        if (dynamicComponent?.Instance is IExecutableComponent executableComponent)
        {
            executableComponent.Execute();
        }
    }
}

