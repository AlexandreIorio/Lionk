@page "/"
@inject ISnackbar Snackbar
@inject IComponentService ComponentService
@inject IDialogService DialogService
@using Lionk.Core.Component
@using Lionk.Core.View
@using Lionk.Plugin
@using LionkApp.Components.Model
@using IComponent = Lionk.Core.Component.IComponent
@using LionkApp.Components.Widgets.Dialogs
@using LionkApp.Services
@namespace LionkApp.Components.Pages

<PageTitle>Dashboard</PageTitle>
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    @foreach (var item in DashboardRegistry ?? [])
    {
        <ContainerView ComponentViewModel="@item"
                       OnUpdate="UpdateDashboardItem"
                       OnDelete="RemoveDashboardItem"
                       Style="min-height:200px" />
    }

</MudContainer>

<MudFab @onclick="OpenDialogAsync"
        Color="Color.Secondary"
        StartIcon="@Icons.Material.Filled.Add"
        Size="Size.Large"
        Style="position: fixed; bottom: 20px; right: 20px;" />

@code {
    public List<ComponentViewModel>? DashboardRegistry { get; set; } = new();
    private IDashboardItemPersistenceManager? _persistenceManager;

    protected override void OnInitialized()
    {
        _persistenceManager = new DashboardItemPersistenceManagerJson();
        RestoreDashboard();
    }

    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true };
        var parameters = new DialogParameters();
        var dialog = DialogService.Show<WidgetAdder>("Widget selection", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            var newWidget = result.Data as ComponentViewModel;
            if (newWidget != null)
            {
                _persistenceManager?.SaveDashboardItem(newWidget);
                RestoreDashboard();
                StateHasChanged();
            }
        }
    }

    private void RestoreDashboard()
    {
        DashboardRegistry?.Clear();
        DashboardRegistry = _persistenceManager?.GetDashboardItems();
        StateHasChanged();
    }

    private void UpdateDashboardItem(ComponentViewModel item)
    {
        _persistenceManager?.UpdateDashboardItem(item);
        RestoreDashboard();
    }

    private void RemoveDashboardItem(ComponentViewModel item)
    {
        _persistenceManager?.RemoveDashboardItemModel(item);
        RestoreDashboard();
    }
}