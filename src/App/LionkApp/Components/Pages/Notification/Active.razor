@page "/active"
@using Lionk.Notification
@inject NotificationStateService NotificationState

@if (notifications != null)
{
    <MudTable Items="notifications" Hover="true" SortLabel="Sort by" Elevation="0" AllowUnsorted="false">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<NotificationHistory, object>(x => x.Notification.Timestamp)">Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<NotificationHistory, object>(x => x.Notification.Content.Level)">Severity</MudTableSortLabel></MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Message</MudTh>
            <MudTh>Status</MudTh>
            <MudTh style="text-align: center;">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Notification.Timestamp.ToString("g")</MudTd>
            <MudTd DataLabel="Severity">@context.Notification.Content.Level.ToString()</MudTd>
            <MudTd DataLabel="Title">@context.Notification.Content.Title</MudTd>
            <MudTd DataLabel="Message">@context.Notification.Content.Message</MudTd>
            <MudTd DataLabel="Status">Unread</MudTd>
            <MudTd style="text-align: center; vertical-align: middle;">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => MarkAsRead(@context))">Mark as read</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new[] { 50, 100 }"/>
        </PagerContent>
    </MudTable>
}

@code {
    List<NotificationHistory>? notifications;

    protected override void OnInitialized()
    {
        LoadUnreadNotifications();
    }

    private void LoadUnreadNotifications()
    {
        notifications = NotificationService.GetNotifications()
                                           .Where(n => !n.IsRead)
                                           .ToList();
    }

    private void MarkAsRead(NotificationHistory notification)
    {
        notification.Read();
        NotificationState.BadgeContent = Math.Max(NotificationState.BadgeContent - 1, 0);
        LoadUnreadNotifications();
        StateHasChanged();
    }
}