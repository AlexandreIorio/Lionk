@page "/history"
@using Lionk.Notification

@if (notifications != null)
{
    <MudTable Items="notifications" Hover="true" SortLabel="Sort by" Elevation="0" AllowUnsorted="false">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<NotificationHistory, object>(x => x.Notification.Timestamp)">Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<NotificationHistory, object>(x => x.Notification.Content.Title)">Title</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<NotificationHistory, object>(x => x.IsRead)">Status</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Notification.Timestamp.ToString("g")</MudTd>
            <MudTd DataLabel="Title">@context.Notification.Content.Title</MudTd>
            <MudTd DataLabel="Status">@context.IsRead ? "Read" : "Unread"</MudTd>
            <MudTd>
                <MudButton OnClick="@(() => MarkAsRead(@context))">Mark as read</MudButton>
                <MudButton OnClick="@(() => MarkAsUnread(@context))">Mark as unread</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}

@code {
    List<NotificationHistory>? notifications;

    protected override void OnInitialized()
    {
        notifications = NotificationService.GetNotifications();
    }

    private void MarkAsRead(NotificationHistory notification)
    {
        notification.Read();
    }

    private void MarkAsUnread(NotificationHistory notification)
    {
        notification.Unread();
    }
}
