@page "/configuration"
@inject IDialogService DialogService
@implements IDisposable
@using LionkApp.Components.Widgets.Content.Notification
@using LionkApp.Components.Widgets.Dialogs
@using Lionk.Notification
@using System.Collections.ObjectModel

<NotifierList/>
<ChannelList/>
<MudButton Variant=Variant.Filled Color=Color.Primary OnClick="SendTestNotification">
    Send test notification
</MudButton>

@code {

    // ********************************** Mock
    public class MockNotifyer : INotifier
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;

        public bool Equals(INotifier? other)
        {
            return other != null && Id == other.Id;
        }
    }

    public class MockChannel : IChannel
    {
        public Guid Guid { get; set; }
        public string Name { get; set; } = string.Empty;
        public List<IRecipient> Recipients { get; set; } = new();
        public bool IsInitialized { get; set; } = false;

        public void AddRecipients(params IRecipient[] recipients)
        {
            Recipients.AddRange(recipients);
        }

        public void Initialize()
        {
            IsInitialized = true;
        }

        public void Send(INotifier notifyer, Content content)
        {
        }

        public bool Equals(IChannel? other)
        {
            return other != null && Guid == other.Guid;
        }
    }

    private List<INotifier> MockNotifyers = new List<INotifier>
    {
        new MockNotifyer { Id = Guid.NewGuid(), Name = "Chimpey" },
        new MockNotifyer { Id = Guid.NewGuid(), Name = "Clock alarm" },
        new MockNotifyer { Id = Guid.NewGuid(), Name = "MX321" }
    };

    private List<IChannel> MockChannels = new List<IChannel>
    {
        new MockChannel { Guid = Guid.NewGuid(), Name = "Discord", IsInitialized = true },
        new MockChannel { Guid = Guid.NewGuid(), Name = "Telegram", IsInitialized = false },
        new MockChannel { Guid = Guid.NewGuid(), Name = "Push bullet", IsInitialized = true }
    };
    // **********************************

    public ReadOnlyCollection<INotifier> Notifiers { get; set; } = new List<INotifier>().AsReadOnly();

    public ReadOnlyCollection<IChannel> Channels { get; set; } = new List<IChannel>().AsReadOnly();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        NotificationService.AddNotifiers(MockNotifyers[0], MockNotifyers[1], MockNotifyers[2]);
        NotificationService.AddChannels(MockChannels[0], MockChannels[1], MockChannels[2]);
        NotificationService.MapNotifierToChannel(MockNotifyers[0], MockChannels[0], MockChannels[1]);
        NotificationService.MapNotifierToChannel(MockNotifyers[1], MockChannels[1], MockChannels[2]);
        NotificationService.MapNotifierToChannel(MockNotifyers[2], MockChannels[2], MockChannels[0]);

        Notifiers = NotificationService.Notifiers;
        Channels = NotificationService.Channels;
    }

    private void SendTestNotification()
    {

    }

    public void Dispose()
    {
        foreach (var notifier in Notifiers.ToList())
        {
            NotificationService.RemoveNotifier(notifier);
        }

        foreach (var channel in Channels.ToList())
        {
            NotificationService.RemoveChannel(channel);
        }
    }
}
