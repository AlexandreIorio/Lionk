@page "/configuration"
@inject IDialogService DialogService
@implements IDisposable
@using LionkApp.Components.Widgets.Content.Notification
@using LionkApp.Components.Widgets.Dialogs
@using Lionk.Notification
@using System.Collections.ObjectModel
@using Newtonsoft.Json

<NotifierList/>
<ChannelList/>
<MudButton Variant=Variant.Filled Color=Color.Primary OnClick="SendTestNotification">
    Send test notification
</MudButton>

@code {

    // ********************************** Mock

    public class MockRecipient : IRecipient
    {
        public MockRecipient(string name) => Name = name;

        [JsonConstructor]
        public MockRecipient(string name, Guid guid)
            : this(name) =>
            Guid = guid;

        public Guid Guid { get; private set; } = Guid.NewGuid();

        public string Name { get; private set; }
    }

    public class MockNotifier : INotifier
    {
        [JsonConstructor]
        public MockNotifier(Guid guid, string name)
        {
            Id = guid;
            Name = name;
        }

        public MockNotifier(string name) => Name = name;

        public Guid Id { get; private set; } = Guid.NewGuid();

        public string Name { get; private set; } = "NotifyerTest";

        public bool Equals(INotifier? obj) => obj is MockNotifier notifier && notifier.Id == Id;
    }

    public class MockChannel : IChannel
    {
        public MockChannel(string name)
        {
            Name = name;
            Recipients = [];
        }

        [JsonConstructor]
        public MockChannel(Guid guid, string name, List<IRecipient> recipients, bool isInitialized)
        {
            Guid = guid;
            Name = name;
            IsInitialized = isInitialized;
            Recipients = recipients;
        }

        public Guid Guid { get; private set; } = Guid.NewGuid();

        public bool IsInitialized { get; private set; }

        public string Name { get; set; } = "Channel";

        [JsonProperty]
        public List<IRecipient> Recipients { get; private set; }

        public void AddRecipients(params IRecipient[] recipients)
        {
            List<IRecipient> recipientsToAdd = [];
            foreach (IRecipient recipient in recipients)
            {
                if (Recipients.Contains(recipient) || recipient is not MockRecipient)
                {
                    continue;
                }

                recipientsToAdd.Add(recipient);
            }

            Recipients.AddRange(recipientsToAdd);
        }

        public bool Equals(IChannel? obj)
        {
            if (obj is MockChannel channel)
            {
                return Guid == channel.Guid && Name == channel.Name;
            }

            return false;
        }

        public void Initialize()
        {
            // do nothing
        }

        public void Send(INotifier notifier, Content content)
        {
            // do nothing
        }
    }

    private List<INotifier> MockNotifiers = new List<INotifier>
    {
        new MockNotifier(Guid.NewGuid(), "Chimpey"),
        new MockNotifier(Guid.NewGuid(), "Clock alarm"),
        new MockNotifier(Guid.NewGuid(), "MX321")
    };

    private List<IChannel> MockChannels = new List<IChannel>
    {
        new MockChannel(Guid.NewGuid(), "Discord", new List<IRecipient>(), true),
        new MockChannel(Guid.NewGuid(), "Telegram", new List<IRecipient>(), false),
        new MockChannel(Guid.NewGuid(), "Push bullet", new List<IRecipient>(), true)
    };

    // **********************************

    public ReadOnlyCollection<INotifier> Notifiers { get; set; } = new List<INotifier>().AsReadOnly();

    public ReadOnlyCollection<IChannel> Channels { get; set; } = new List<IChannel>().AsReadOnly();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        NotificationService.AddNotifiers(MockNotifiers[0], MockNotifiers[1], MockNotifiers[2]);
        NotificationService.AddChannels(MockChannels[0], MockChannels[1], MockChannels[2]);
        NotificationService.MapNotifierToChannel(MockNotifiers[0], MockChannels[0], MockChannels[1]);
        NotificationService.MapNotifierToChannel(MockNotifiers[1], MockChannels[1], MockChannels[2]);
        NotificationService.MapNotifierToChannel(MockNotifiers[2], MockChannels[2], MockChannels[0]);

        Notifiers = NotificationService.Notifiers;
        Channels = NotificationService.Channels;
    }

    private void SendTestNotification()
    {
        Content content = new(Lionk.Notification.Severity.Information, "Test Notification", "This is a test notification.");
        INotifier notifier = MockNotifiers[0];
        Notification notification = new(content, notifier);
        NotificationService.Send(notification);
    }

    public void Dispose()
    {
        foreach (var notifier in Notifiers.ToList())
        {
            NotificationService.RemoveNotifier(notifier);
        }

        foreach (var channel in Channels.ToList())
        {
            NotificationService.RemoveChannel(channel);
        }
    }
}
