@page "/configuration"
@inject IDialogService DialogService
@using Lionk.Notification
@using LionkApp.Components.Widgets.Dialogs

<MudPaper Elevation="2" Class="pa-4 mb-10">
    <MudText Typo="Typo.h6">Notifier List</MudText>
    <MudList T="string" Class="mt-4">
        @foreach (var notifyer in mocknotifyers)
        {
            <MudListItem>
                <div style="display: flex; align-items: center; justify-content: space-between; width: 100%; height: 30px;">
                    <MudText>@notifyer.Name</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="OnConfigureNotifierClicked" />
                </div>
            </MudListItem>
        }
    </MudList>
</MudPaper>

<MudPaper Elevation="2" Class="pa-4 mb-10">
    <div style="display: flex; align-items: center; justify-content: space-between;">
        <MudText Typo="Typo.h6">Channel List</MudText>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" @onclick="OnAddChannelClicked">ADD</MudButton>
    </div>
    <MudList T="string" Class="mt-4">
        @foreach (var channel in mockchannels)
        {
            <MudListItem>
                <div style="display: flex; align-items: center; justify-content: space-between; width: 100%; height: 30px;">
                    <MudText>@channel.Name</MudText>
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" @onclick="OnConfigureChannelClicked" />
                </div>
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {

    // ********************************** Mock
    // **********************************
    // **********************************
    public class MockNotifyer : INotifyer
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;

        public bool Equals(INotifyer? other)
        {
            return other != null && Id == other.Id;
        }
    }

    public class MockChannel : IChannel
    {
        public Guid Guid { get; set; }
        public string Name { get; set; } = string.Empty;
        public List<IRecipient> Recipients { get; set; } = new();
        public bool IsInitialized { get; set; } = false;

        public void AddRecipients(params IRecipient[] recipients)
        {
            Recipients.AddRange(recipients);
        }

        public void Initialize()
        {
            IsInitialized = true;
        }

        public void Send(INotifyer notifyer, Content content)
        {
        }

        public bool Equals(IChannel? other)
        {
            return other != null && Guid == other.Guid;
        }
    }

    private List<INotifyer> mocknotifyers = new List<INotifyer>
    {
        new MockNotifyer { Id = Guid.NewGuid(), Name = "Chimpey" },
        new MockNotifyer { Id = Guid.NewGuid(), Name = "Clock alarm" },
        new MockNotifyer { Id = Guid.NewGuid(), Name = "MX321" }
    };

    private List<IChannel> mockchannels = new List<IChannel>
    {
        new MockChannel { Guid = Guid.NewGuid(), Name = "Discord", IsInitialized = true },
        new MockChannel { Guid = Guid.NewGuid(), Name = "Telegram", IsInitialized = false },
        new MockChannel { Guid = Guid.NewGuid(), Name = "Push bullet", IsInitialized = true }
    };

    private Dictionary<Guid, List<IChannel>> NotifyerChannels;

    public Configuration()
    {
        NotifyerChannels = new Dictionary<Guid, List<IChannel>>
        {
            { mocknotifyers[0].Id, new List<IChannel> { mockchannels[0], mockchannels[1] } },
            { mocknotifyers[1].Id, new List<IChannel> { mockchannels[2] } },
            { mocknotifyers[2].Id, new List<IChannel> { mockchannels[0], mockchannels[2] } }
        };
    }
    // **********************************
    // ********************************** 
    // **********************************

    // private ReadOnlyCollection<INotifyer>? notifyers;
    // private ReadOnlyCollection<IChannel>? channels;

    protected override void OnInitialized()
    {
        // TODO - Get notifyers and channels when ready
        // notifyers = NotificationService.Notifyers;
        // channels = NotificationService.Channels;
    }

    private void OnConfigureNotifierClicked()
    {
    }

    private Task OnAddChannelClicked()
    {
        // TODO - Get available channels when ready
        var channelList = new DialogParameters {{ "Channels", new List<string> { "Teams", "Facebook", "Nastaran" }}};

        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<ChannelSelector>("Select channel", channelList, options);
    }

    private void OnConfigureChannelClicked()
    {
        // TODO - Retrieve the configurable view from dll
    }
}
